apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'realm-android'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'me.tatarka:gradle-retrolambda:3.2.5'
    }
}

android {
    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
    buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")

    defaultConfig {
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")

        applicationId globalConfiguration.getAt("androidApplicationId")
        versionCode globalConfiguration.getAt("androidVersionCode")
        versionName globalConfiguration.getAt("androidVersionName")
        testInstrumentationRunner globalConfiguration.getAt("testInstrumentationRunner")
        testApplicationId globalConfiguration.getAt("testApplicationId")
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
        disable 'InvalidPackage'            //Some libraries have issues with this.
        disable 'OldTargetApi'              //Lint gives this warning but SDK 20 would be Android L Beta.
        disable 'IconDensities'             //For testing purpose. This is safe to remove.
        disable 'IconMissingDensityFolder'  //For testing purpose. This is safe to remove.
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }
}



dependencies {
    def coreDependencies = rootProject.ext.coreDependencies
    //def presentationTestDependencies = rootProject.ext.presentationTestDependencies
    def debugDependencies = rootProject.ext.debugDependencies
    def googleSupportDependencies = rootProject.ext.googleSupportDependencies

    compile project(':uiframework')
    compile project(':uikit')
    compile project(':ext')

    compile fileTree(include: ['*.jar'], dir: 'libs')

    compile googleSupportDependencies.appcompatV7
    compile googleSupportDependencies.design
    compile googleSupportDependencies.supportV4
    compile googleSupportDependencies.recyclerview
    compile googleSupportDependencies.cardview

    apt coreDependencies.butterKnifeCompiler
    apt coreDependencies.daggerCompiler

    compile coreDependencies.eventBus
    compile coreDependencies.dagger
    compile coreDependencies.butterKnife
    compile coreDependencies.rxJava
    compile coreDependencies.rxAndroid
    provided coreDependencies.javaxAnnotation
    compile coreDependencies.androidAnnotations
    //net
    compile coreDependencies.okHttp
    compile coreDependencies.okHttpLoggingInterceptor
    compile coreDependencies.retrofit
    compile coreDependencies.retrofitConverterGson
    compile coreDependencies.retrofitAdapterRxJava
    compile coreDependencies.gson
    //image
    compile coreDependencies.glide
    compile coreDependencies.glideTransform
    //font
    compile coreDependencies.iconicsCore
    compile coreDependencies.fontGMI
    compile coreDependencies.fontMDI
    //tool






    compile debugDependencies.logger



//    androidTestCompile presentationTestDependencies.mockito
//    androidTestCompile presentationTestDependencies.dexmaker
//    androidTestCompile presentationTestDependencies.dexmakerMockito
//    androidTestCompile presentationTestDependencies.espresso
//    androidTestCompile presentationTestDependencies.testingSupportLib

}
